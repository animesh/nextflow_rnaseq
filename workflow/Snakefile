########### Libraries ###########
import pandas as pd

####### Configuration #######
configfile: "config/config.yaml"
WORKING_DIR = config["working_dir"]
RESULT_DIR = config["result_dir"]

# Load sample data
samples = pd.read_table(config["units"], dtype=str).set_index("sample", drop=False)
SAMPLES=samples.index.unique()

# Include rules
include: "rules/fastp.smk"
include: "rules/fastqc.smk"
include: "rules/qualimap.smk"
include: "rules/star.smk"
include: "rules/subread.smk"
include: "rules/hisat2.smk"
include: "rules/stringtie.smk"
include: "rules/featurecounts.smk"
include: "rules/htseq.smk"
include: "rules/salmon.smk"
include: "rules/sailfish.smk"
include: "rules/kallisto.smk"
include: "rules/rsem.smk"
# include: "rules/multiqc.smk"


##### Define a function to determine which BAM files to use
def get_bam_paths(wildcards):
    paths = []
    if config["alignment"]["star"]:
        paths.append(RESULT_DIR + "star/{sample}.Aligned.sortedByCoord.out.bam".format(sample=wildcards.sample))
    if config["alignment"]["hisat2"]:
        paths.append(RESULT_DIR + "hisat2/{sample}.bam".format(sample=wildcards.sample))
    if config["alignment"]["subread"]:
        paths.append(RESULT_DIR + "subread/{sample}.bam".format(sample=wildcards.sample))
    if not paths:
        raise ValueError('please specify at least one "true" for the "alignment" parameter in the config file.')
    return paths

# Utility function to convert BAM paths to BAI paths
def bam_to_bai(bam_paths):
    return [path + ".bai" for path in bam_paths]


##### Define final outputs
quantification_outputs = {
    'star': [RESULT_DIR + "star/{sample}.ReadsPerGene.out.tab"],
    'stringtie': [
        RESULT_DIR + "stringtie/{sample}.gene.abundance.txt",
        RESULT_DIR + "stringtie/{sample}.cov.ref.gtf",
        RESULT_DIR + "stringtie/{sample}.ballgown.gtf"
    ],
    'featurecounts': [
        RESULT_DIR + "featurecounts/{sample}",
        RESULT_DIR + "featurecounts/{sample}.jcounts",
        RESULT_DIR + "featurecounts/{sample}.summary"
    ],
    'htseq': [RESULT_DIR + "htseq/{sample}.count"],
    'rsem': [
        RESULT_DIR + "rsem/{sample}.genes.results",
        RESULT_DIR + "rsem/{sample}.isoforms.results",
        RESULT_DIR + "rsem/{sample}.stat/{sample}.cnt",
        RESULT_DIR + "rsem/{sample}.stat/{sample}.model",
        RESULT_DIR + "rsem/{sample}.stat/{sample}.theta"
    ],
    'kallisto': [
        RESULT_DIR + "kallisto/{sample}/abundance.tsv",
        RESULT_DIR + "kallisto/{sample}/abundance.h5",
        RESULT_DIR + "kallisto/{sample}/run_info.json"
    ],
    'sailfish': [RESULT_DIR + "sailfish/{sample}/quant.sf"],
    'salmon': [
        RESULT_DIR + "salmon/{sample}/quant.genes.sf",
        RESULT_DIR + "salmon/{sample}/quant.sf"
    ]
}

# Generating a list of enabled quantification methods' outputs
enabled_outputs = [
    path
    for method, paths in quantification_outputs.items()
    if config["quantification"].get(method, False)
    for path in expand(paths, sample=SAMPLES)
]

if not enabled_outputs:
    raise ValueError('Please specify at least one "true" for the "quantification" methods in the config file.')


### Add QC reports
fastqc_outputs = expand(RESULT_DIR + "fastqc/{sample}_{read}_trimmed_fastqc.{ext}", sample=SAMPLES, read=["R1", "R2"], ext=["html", "zip"])
enabled_outputs.extend(fastqc_outputs)
qualimap_outputs = expand(RESULT_DIR + "qualimap/{sample}_qualimap_{suffix}.tar.gz", sample=SAMPLES, suffix=["rnaseq", "bamqc"])
enabled_outputs.extend(qualimap_outputs)


rule all:
    input: enabled_outputs
    message: "Running all enabled quantification methods."
